// src/data/sections/api-methods.ts
import type { Seccion } from '../../types';

/**
 * Datos sobre m√©todos de API y protocolos de comunicaci√≥n
 * Incluye REST, SOAP, GraphQL, gRPC y m√°s
 */
export const apiMethodsData: Seccion = {
  id: 'api-methods',
  titulo: 'M√©todos de API y Protocolos',
  descripcion: 'Gu√≠a completa sobre diferentes m√©todos de API, sus diferencias, ventajas y casos de uso',
  icono: 'üåê',
  subtemas: [
    {
      id: 'rest-api',
      titulo: 'REST API',
      icono: 'üîÑ',
      items: [
        {
          subtitulo: '¬øQu√© es REST?',
          texto: 'REST (Representational State Transfer) es un estilo arquitect√≥nico para dise√±ar servicios web que se basa en el protocolo HTTP.',
          items: [
            'Arquitectura sin estado (stateless)',
            'Orientado a recursos con URIs √∫nicos',
            'Usa m√©todos HTTP est√°ndar (GET, POST, PUT, DELETE)',
            'Formato de datos flexible (JSON, XML, HTML)',
            'Cacheable para mejorar rendimiento'
          ]
        },
        {
          subtitulo: 'Ejemplo REST b√°sico',
          texto: 'Estructura t√≠pica de endpoints REST para un recurso de usuarios.',
          codigo: `// Endpoints REST t√≠picos
GET    /api/users       // Obtener todos los usuarios
GET    /api/users/123   // Obtener usuario espec√≠fico
POST   /api/users       // Crear nuevo usuario
PUT    /api/users/123   // Actualizar usuario completo
PATCH  /api/users/123   // Actualizar parcialmente
DELETE /api/users/123   // Eliminar usuario

// Ejemplo de respuesta REST
{
  "id": 123,
  "name": "Juan P√©rez",
  "email": "juan@example.com",
  "created_at": "2024-01-15T10:30:00Z"
}`,
          lenguaje: 'javascript'
        },
        {
          subtitulo: 'Ventajas y Desventajas',
          texto: 'Cu√°ndo usar REST y cu√°ndo considerar otras alternativas.',
          items: [
            '‚úÖ Simple y f√°cil de entender',
            '‚úÖ Amplio soporte en todos los lenguajes',
            '‚úÖ Cacheable y escalable',
            '‚ùå Over-fetching/Under-fetching de datos',
            '‚ùå M√∫ltiples llamadas para datos relacionados',
            'üìç Ideal para: APIs p√∫blicas, CRUD simple'
          ]
        }
      ]
    },
    {
      id: 'soap-api',
      titulo: 'SOAP',
      icono: 'üì¶',
      items: [
        {
          subtitulo: '¬øQu√© es SOAP?',
          texto: 'SOAP (Simple Object Access Protocol) es un protocolo de mensajer√≠a basado en XML para intercambiar informaci√≥n estructurada.',
          items: [
            'Protocolo basado en XML con estructura estricta',
            'Independiente del transporte (HTTP, SMTP, TCP)',
            'Soporta WS-Security para seguridad avanzada',
            'WSDL para describir servicios',
            'Transacciones ACID completas'
          ]
        },
        {
          subtitulo: 'Estructura SOAP',
          texto: 'Ejemplo b√°sico de request y response SOAP.',
          codigo: `<!-- Request SOAP -->
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Header>
    <auth:Authentication xmlns:auth="http://example.com">
      <auth:Username>usuario</auth:Username>
      <auth:Password>contrase√±a</auth:Password>
    </auth:Authentication>
  </soap:Header>
  <soap:Body>
    <GetUser xmlns="http://example.com/users">
      <UserId>123</UserId>
    </GetUser>
  </soap:Body>
</soap:Envelope>

<!-- Response SOAP -->
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Body>
    <GetUserResponse xmlns="http://example.com/users">
      <User>
        <Id>123</Id>
        <Name>Juan P√©rez</Name>
        <Email>juan@example.com</Email>
      </User>
    </GetUserResponse>
  </soap:Body>
</soap:Envelope>`,
          lenguaje: 'xml'
        },
        {
          subtitulo: 'SOAP vs REST',
          texto: 'Diferencias clave para tomar decisiones arquitect√≥nicas.',
          items: [
            'üìã SOAP es un protocolo, REST es un estilo',
            'üìÑ SOAP solo XML, REST soporta JSON/XML/etc',
            'üîí SOAP tiene WS-Security, REST usa HTTPS/OAuth',
            'üìä REST m√°s ligero, SOAP m√°s robusto',
            'üíº SOAP ideal para: Banca, seguros, transacciones cr√≠ticas',
            'üåê REST ideal para: APIs web, m√≥viles, microservicios'
          ]
        }
      ]
    },
    {
      id: 'graphql-api',
      titulo: 'GraphQL',
      icono: 'üî∑',
      items: [
        {
          subtitulo: '¬øQu√© es GraphQL?',
          texto: 'GraphQL es un lenguaje de consulta para APIs que permite solicitar exactamente los datos necesarios.',
          items: [
            'Desarrollado por Facebook en 2012',
            'Un √∫nico endpoint para todas las operaciones',
            'Sistema de tipos fuertemente tipado',
            'Evita over-fetching y under-fetching',
            'Introspecci√≥n del esquema'
          ]
        },
        {
          subtitulo: 'Query GraphQL',
          texto: 'Ejemplo de consulta GraphQL vs REST.',
          codigo: `# GraphQL Query - Un solo request
query GetUserWithPosts {
  user(id: "123") {
    name
    email
    posts {
      title
      content
      comments {
        text
        author {
          name
        }
      }
    }
  }
}

# Equivalente en REST - M√∫ltiples requests
GET /api/users/123
GET /api/users/123/posts
GET /api/posts/1/comments
GET /api/posts/2/comments
GET /api/users/456  # Para cada autor de comentario`,
          lenguaje: 'graphql'
        },
        {
          subtitulo: 'Schema b√°sico',
          texto: 'Definici√≥n de tipos en GraphQL.',
          codigo: `type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
}

type Query {
  user(id: ID!): User
  users: [User!]!
  post(id: ID!): Post
}

type Mutation {
  createUser(name: String!, email: String!): User!
  updateUser(id: ID!, name: String): User!
}`,
          lenguaje: 'graphql'
        },
        {
          subtitulo: 'Ventajas de GraphQL',
          texto: 'Por qu√© elegir GraphQL sobre REST.',
          items: [
            '‚úÖ Obt√©n exactamente los datos que necesitas',
            '‚úÖ Reduce el n√∫mero de requests',
            '‚úÖ Fuertemente tipado con auto-documentaci√≥n',
            '‚úÖ Evoluci√≥n sin versionado',
            '‚ùå Curva de aprendizaje m√°s alta',
            '‚ùå Complejidad en cach√©',
            'üìç Ideal para: Apps m√≥viles, dashboards complejos'
          ]
        }
      ]
    },
    {
      id: 'grpc-api',
      titulo: 'gRPC',
      icono: '‚ö°',
      items: [
        {
          subtitulo: '¬øQu√© es gRPC?',
          texto: 'gRPC es un framework RPC moderno y de alto rendimiento desarrollado por Google.',
          items: [
            'Basado en HTTP/2 para mejor performance',
            'Usa Protocol Buffers (protobuf) para serializaci√≥n',
            'Soporta streaming bidireccional',
            'Generaci√≥n autom√°tica de c√≥digo cliente/servidor',
            'Ideal para comunicaci√≥n entre microservicios'
          ]
        },
        {
          subtitulo: 'Protocol Buffers',
          texto: 'Definici√≥n de servicios con protobuf.',
          codigo: `// user.proto
syntax = "proto3";

package user;

service UserService {
  rpc GetUser (GetUserRequest) returns (User);
  rpc ListUsers (Empty) returns (UserList);
  rpc CreateUser (CreateUserRequest) returns (User);
  rpc StreamUsers (Empty) returns (stream User);
}

message User {
  int32 id = 1;
  string name = 2;
  string email = 3;
}

message GetUserRequest {
  int32 id = 1;
}

message CreateUserRequest {
  string name = 1;
  string email = 2;
}

message UserList {
  repeated User users = 1;
}

message Empty {}`,
          lenguaje: 'protobuf'
        },
        {
          subtitulo: 'gRPC vs REST',
          texto: 'Comparaci√≥n de rendimiento y casos de uso.',
          items: [
            '‚ö° gRPC 7-10x m√°s r√°pido que REST/JSON',
            'üì¶ Protobuf m√°s eficiente que JSON',
            'üîÑ Streaming bidireccional nativo',
            'üîß Generaci√≥n autom√°tica de SDKs',
            '‚ùå No funciona directamente en navegadores',
            '‚ùå Menos herramientas de debugging',
            'üìç Ideal para: Microservicios, sistemas distribuidos'
          ]
        }
      ]
    },
    {
      id: 'websockets',
      titulo: 'WebSockets',
      icono: 'üîå',
      items: [
        {
          subtitulo: '¬øQu√© son WebSockets?',
          texto: 'WebSocket es un protocolo que permite comunicaci√≥n bidireccional en tiempo real entre cliente y servidor.',
          items: [
            'Conexi√≥n persistente full-duplex',
            'Comunicaci√≥n en tiempo real',
            'Menor latencia que HTTP polling',
            'Ideal para chats, notificaciones, actualizaciones en vivo',
            'Soportado por todos los navegadores modernos'
          ]
        },
        {
          subtitulo: 'Ejemplo WebSocket',
          texto: 'Implementaci√≥n b√°sica cliente-servidor.',
          codigo: `// Cliente WebSocket
const ws = new WebSocket('ws://localhost:8080');

ws.onopen = () => {
  console.log('Conectado');
  ws.send(JSON.stringify({ type: 'greeting', data: 'Hola servidor!' }));
};

ws.onmessage = (event) => {
  const message = JSON.parse(event.data);
  console.log('Mensaje recibido:', message);
};

ws.onerror = (error) => {
  console.error('Error:', error);
};

// Servidor WebSocket (Node.js)
const WebSocket = require('ws');
const wss = new WebSocket.Server({ port: 8080 });

wss.on('connection', (ws) => {
  console.log('Cliente conectado');
  
  ws.on('message', (data) => {
    const message = JSON.parse(data);
    console.log('Recibido:', message);
    
    // Broadcast a todos los clientes
    wss.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify({
          type: 'broadcast',
          data: message.data
        }));
      }
    });
  });
});`,
          lenguaje: 'javascript'
        }
      ]
    },
    {
      id: 'comparacion-general',
      titulo: 'Comparaci√≥n General',
      icono: 'üìä',
      items: [
        {
          subtitulo: 'Cu√°ndo usar cada m√©todo',
          texto: 'Gu√≠a r√°pida para elegir el m√©todo de API apropiado seg√∫n el caso de uso.',
          items: [
            'REST: APIs p√∫blicas, CRUD simple, aplicaciones web',
            'SOAP: Sistemas empresariales, transacciones financieras, seguridad cr√≠tica',
            'GraphQL: Apps m√≥viles, dashboards complejos, cuando necesitas flexibilidad',
            'gRPC: Microservicios internos, alta performance, streaming',
            'WebSockets: Chat en tiempo real, notificaciones push, colaboraci√≥n en vivo'
          ]
        },
        {
          subtitulo: 'Tabla comparativa',
          texto: 'Resumen de caracter√≠sticas principales.',
          codigo: `| Caracter√≠stica    | REST  | SOAP  | GraphQL | gRPC   | WebSocket |
|-------------------|-------|-------|---------|--------|-----------|
| Protocolo         | HTTP  | Any   | HTTP    | HTTP/2 | WS        |
| Formato           | Any   | XML   | JSON    | Binary | Any       |
| Tipado            | No    | S√≠    | S√≠      | S√≠     | No        |
| Tiempo real       | No    | No    | Sub.    | Stream | S√≠        |
| Complejidad       | Baja  | Alta  | Media   | Media  | Baja      |
| Performance       | Media | Baja  | Media   | Alta   | Alta      |
| Cach√©             | S√≠    | Dif√≠cil| Dif√≠cil | No     | No        |`,
          lenguaje: 'markdown'
        }
      ]
    }
  ]
};