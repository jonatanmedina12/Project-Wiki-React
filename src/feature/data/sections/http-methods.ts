// src/data/sections/http-methods.ts
import type { Seccion } from '../../types';

/**
 * Datos sobre m√©todos HTTP utilizados en APIs
 * Incluye GET, POST, PUT, PATCH, DELETE y otros
 */
export const httpMethodsData: Seccion = {
  id: 'http-methods',
  titulo: 'M√©todos HTTP en APIs',
  descripcion: 'Gu√≠a completa de m√©todos HTTP, sus diferencias, usos correctos y ejemplos pr√°cticos',
  icono: 'üîÄ',
  subtemas: [
    {
      id: 'metodos-principales',
      titulo: 'M√©todos Principales',
      icono: 'üìã',
      items: [
        {
          subtitulo: 'GET - Obtener recursos',
          texto: 'M√©todo para recuperar informaci√≥n sin causar efectos secundarios. Debe ser idempotente y seguro.',
          items: [
            'Solo lectura, no modifica el estado del servidor',
            'Puede ser cacheado por navegadores y proxies',
            'Los par√°metros van en la URL (query string)',
            'Idempotente: m√∫ltiples llamadas = mismo resultado',
            'L√≠mite de longitud en URL (~2048 caracteres)'
          ],
          codigo: `// Ejemplos de GET
GET /api/users                    // Obtener todos los usuarios
GET /api/users/123               // Obtener usuario espec√≠fico
GET /api/users?role=admin        // Filtrar por rol
GET /api/users?page=2&limit=20   // Paginaci√≥n
GET /api/users/123/posts         // Recursos relacionados

// Respuesta t√≠pica
HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 123,
  "name": "Juan P√©rez",
  "email": "juan@example.com"
}`,
          lenguaje: 'http'
        },
        {
          subtitulo: 'POST - Crear recursos',
          texto: 'M√©todo para crear nuevos recursos en el servidor. No es idempotente.',
          items: [
            'Crea un nuevo recurso en la colecci√≥n',
            'El servidor asigna el ID del nuevo recurso',
            'No es idempotente: cada llamada crea un nuevo recurso',
            'Datos van en el body de la petici√≥n',
            'Retorna 201 Created con la ubicaci√≥n del nuevo recurso'
          ],
          codigo: `// Ejemplo POST
POST /api/users
Content-Type: application/json

{
  "name": "Mar√≠a Garc√≠a",
  "email": "maria@example.com",
  "role": "user"
}

// Respuesta exitosa
HTTP/1.1 201 Created
Location: /api/users/124
Content-Type: application/json

{
  "id": 124,
  "name": "Mar√≠a Garc√≠a",
  "email": "maria@example.com",
  "role": "user",
  "created_at": "2024-03-20T10:30:00Z"
}`,
          lenguaje: 'http'
        },
        {
          subtitulo: 'PUT - Actualizaci√≥n completa',
          texto: 'M√©todo para reemplazar completamente un recurso existente. Es idempotente.',
          items: [
            'Reemplaza TODO el recurso con los datos enviados',
            'Si falta un campo, se elimina o pone en null',
            'Idempotente: m√∫ltiples llamadas = mismo resultado',
            'Puede crear el recurso si no existe (opcional)',
            'Requiere enviar el objeto completo'
          ],
          codigo: `// Ejemplo PUT - Actualizaci√≥n completa
PUT /api/users/123
Content-Type: application/json

{
  "name": "Juan P√©rez Actualizado",
  "email": "juan.nuevo@example.com",
  "role": "admin",
  "phone": "+1234567890"  // Todos los campos requeridos
}

// Respuesta
HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 123,
  "name": "Juan P√©rez Actualizado",
  "email": "juan.nuevo@example.com",
  "role": "admin",
  "phone": "+1234567890",
  "updated_at": "2024-03-20T11:00:00Z"
}

// ‚ö†Ô∏è Si olvidas un campo:
PUT /api/users/123
{
  "name": "Juan",
  "email": "juan@example.com"
  // Falta "role" y "phone" - ser√°n eliminados!
}`,
          lenguaje: 'http'
        },
        {
          subtitulo: 'PATCH - Actualizaci√≥n parcial',
          texto: 'M√©todo para actualizar parcialmente un recurso. Solo modifica los campos enviados.',
          items: [
            'Actualiza SOLO los campos enviados',
            'Los campos no mencionados permanecen sin cambios',
            'M√°s eficiente para cambios peque√±os',
            'Idempotente cuando se usa correctamente',
            'Puede usar JSON Patch (RFC 6902) o merge patch'
          ],
          codigo: `// Ejemplo PATCH - Actualizaci√≥n parcial
PATCH /api/users/123
Content-Type: application/json

{
  "email": "nuevo.email@example.com"  // Solo cambiar email
}

// Respuesta - otros campos sin cambios
HTTP/1.1 200 OK
{
  "id": 123,
  "name": "Juan P√©rez",           // Sin cambios
  "email": "nuevo.email@example.com",  // Actualizado
  "role": "admin",                // Sin cambios
  "phone": "+1234567890"          // Sin cambios
}

// JSON Patch (RFC 6902) - M√°s preciso
PATCH /api/users/123
Content-Type: application/json-patch+json

[
  { "op": "replace", "path": "/email", "value": "nuevo@example.com" },
  { "op": "add", "path": "/tags/0", "value": "premium" },
  { "op": "remove", "path": "/temporaryFlag" }
]`,
          lenguaje: 'http'
        },
        {
          subtitulo: 'DELETE - Eliminar recursos',
          texto: 'M√©todo para eliminar recursos del servidor. Es idempotente.',
          items: [
            'Elimina el recurso especificado',
            'Idempotente: eliminar algo ya eliminado = mismo resultado',
            'Puede retornar 204 No Content o 200 OK',
            'Algunos APIs hacen "soft delete" (marcan como eliminado)',
            'Puede incluir body para opciones adicionales'
          ],
          codigo: `// Ejemplo DELETE simple
DELETE /api/users/123

// Respuesta sin contenido
HTTP/1.1 204 No Content

// O con confirmaci√≥n
HTTP/1.1 200 OK
{
  "message": "Usuario eliminado exitosamente",
  "deleted_at": "2024-03-20T12:00:00Z"
}

// DELETE con opciones
DELETE /api/users/123
Content-Type: application/json

{
  "mode": "soft",           // Soft delete
  "reason": "Cuenta inactiva",
  "notify_user": true
}`,
          lenguaje: 'http'
        }
      ]
    },
    {
      id: 'put-vs-patch',
      titulo: 'PUT vs PATCH - Diferencias clave',
      icono: '‚öñÔ∏è',
      items: [
        {
          subtitulo: 'Comparaci√≥n directa',
          texto: 'Entendiendo cu√°ndo usar PUT y cu√°ndo usar PATCH en tu API.',
          codigo: `// Recurso original
{
  "id": 1,
  "name": "Producto Original",
  "price": 100,
  "stock": 50,
  "category": "electronics",
  "active": true
}

// ‚ùå PUT - Debe enviar TODO
PUT /api/products/1
{
  "name": "Producto Actualizado",
  "price": 120
  // ‚ö†Ô∏è Faltan stock, category, active - ser√°n null/default!
}

// ‚úÖ PATCH - Solo env√≠a lo que cambia
PATCH /api/products/1
{
  "name": "Producto Actualizado",
  "price": 120
  // ‚úÖ stock, category, active permanecen sin cambios
}`,
          lenguaje: 'javascript'
        },
        {
          subtitulo: 'Casos de uso recomendados',
          texto: 'Gu√≠a pr√°ctica para elegir entre PUT y PATCH.',
          items: [
            'PUT: Cuando el cliente tiene el objeto completo',
            'PUT: Formularios que cargan todos los campos',
            'PUT: Reemplazar configuraciones completas',
            'PATCH: Actualizar un solo campo (ej: cambiar estado)',
            'PATCH: Operaciones espec√≠ficas (ej: incrementar contador)',
            'PATCH: Cuando el ancho de banda es limitado',
            'PATCH: APIs m√≥viles con datos costosos'
          ]
        },
        {
          subtitulo: 'Implementaci√≥n con validaci√≥n',
          texto: 'Ejemplo de implementaci√≥n que muestra la diferencia en validaci√≥n.',
          codigo: `// Express.js - Manejo de PUT vs PATCH

// PUT - Validaci√≥n estricta, todos los campos requeridos
app.put('/api/users/:id', validateFullUser, async (req, res) => {
  const { id } = req.params;
  const userData = req.body;
  
  // Validar que TODOS los campos est√©n presentes
  const requiredFields = ['name', 'email', 'role', 'phone'];
  const missingFields = requiredFields.filter(field => !userData[field]);
  
  if (missingFields.length > 0) {
    return res.status(400).json({
      error: Campos faltantes: {missingFields.join(', ')}
    });
  }
  
  // Reemplazar TODO el documento
  const updatedUser = await User.findByIdAndUpdate(
    id,
    userData,
    { new: true, overwrite: true }  // overwrite: true para PUT
  );
  
  res.json(updatedUser);
});

// PATCH - Validaci√≥n flexible, solo campos enviados
app.patch('/api/users/:id', validatePartialUser, async (req, res) => {
  const { id } = req.params;
  const updates = req.body;
  
  // Validar solo los campos enviados
  const allowedUpdates = ['name', 'email', 'role', 'phone'];
  const updateKeys = Object.keys(updates);
  const isValidOperation = updateKeys.every(key => 
    allowedUpdates.includes(key)
  );
  
  if (!isValidOperation) {
    return res.status(400).json({
      error: 'Campos no permitidos en la actualizaci√≥n'
    });
  }
  
  // Actualizar SOLO los campos enviados
  const updatedUser = await User.findByIdAndUpdate(
    id,
    { $set: updates },  // $set para actualizaci√≥n parcial
    { new: true, runValidators: true }
  );
  
  res.json(updatedUser);
});`,
        }
      ]
    },
    {
      id: 'otros-metodos',
      titulo: 'Otros M√©todos HTTP',
      icono: 'üîß',
      items: [
        {
          subtitulo: 'HEAD - Metadatos sin body',
          texto: 'Similar a GET pero solo retorna headers, sin el body. √ötil para verificar existencia o metadata.',
          items: [
            'Id√©ntico a GET pero sin body en respuesta',
            '√ötil para verificar si un recurso existe',
            'Comprobar si un archivo fue modificado',
            'Obtener tama√±o de archivo antes de descargarlo',
            'Verificar headers de CORS'
          ],
          codigo: `// Verificar si un recurso existe
HEAD /api/users/123

// Respuesta (solo headers, sin body)
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 1547
Last-Modified: Mon, 20 Mar 2024 10:30:00 GMT
ETag: "33a64df551425fcc55e4d42a148795d9f25f89d4"

// Verificar archivo antes de descargar
HEAD /api/files/report.pdf

HTTP/1.1 200 OK
Content-Type: application/pdf
Content-Length: 5242880  // 5MB
Accept-Ranges: bytes     // Soporta descargas parciales`,
          lenguaje: 'http'
        },
        {
          subtitulo: 'OPTIONS - Opciones disponibles',
          texto: 'Descubre qu√© m√©todos y opciones est√°n disponibles para un recurso. Crucial para CORS.',
          items: [
            'Retorna m√©todos HTTP permitidos',
            'Usado en CORS preflight requests',
            'Puede incluir informaci√≥n de autenticaci√≥n requerida',
            'Describe opciones de comunicaci√≥n',
            'No cacheable por defecto'
          ],
          codigo: `// Consultar opciones disponibles
OPTIONS /api/users

// Respuesta
HTTP/1.1 200 OK
Allow: GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, POST, PUT, PATCH, DELETE
Access-Control-Allow-Headers: Content-Type, Authorization
Access-Control-Max-Age: 86400

// CORS Preflight para petici√≥n compleja
OPTIONS /api/users
Origin: https://example.com
Access-Control-Request-Method: DELETE
Access-Control-Request-Headers: Authorization`,
          lenguaje: 'http'
        },
        {
          subtitulo: 'CONNECT y TRACE',
          texto: 'M√©todos menos comunes pero parte del est√°ndar HTTP.',
          items: [
            'CONNECT: Establece t√∫nel TCP/IP (usado en proxies HTTPS)',
            'TRACE: Debug, retorna la petici√≥n recibida (generalmente deshabilitado)',
            'Raramente usados en APIs REST modernas',
            'TRACE puede ser un riesgo de seguridad (XST attacks)',
            'CONNECT usado internamente por navegadores para HTTPS'
          ]
        }
      ]
    },
    {
      id: 'idempotencia',
      titulo: 'Idempotencia y Seguridad',
      icono: 'üîí',
      items: [
        {
          subtitulo: 'M√©todos Idempotentes',
          texto: 'Un m√©todo es idempotente si m√∫ltiples peticiones id√©nticas tienen el mismo efecto que una sola.',
          items: [
            'GET: Siempre retorna el mismo recurso',
            'PUT: Reemplaza con el mismo contenido',
            'DELETE: Eliminar algo ya eliminado = mismo estado',
            'HEAD: Como GET, siempre idempotente',
            'PATCH: Idempotente si se implementa correctamente',
            'POST: NO es idempotente (crea nuevos recursos)'
          ]
        },
        {
          subtitulo: 'M√©todos Seguros',
          texto: 'Un m√©todo es seguro si no modifica el estado del servidor.',
          codigo: `// M√©todos seguros (no modifican estado)
‚úÖ GET     - Solo lectura
‚úÖ HEAD    - Solo headers
‚úÖ OPTIONS - Solo informaci√≥n

// M√©todos no seguros (modifican estado)
‚ùå POST    - Crea recursos
‚ùå PUT     - Modifica recursos
‚ùå PATCH   - Modifica parcialmente
‚ùå DELETE  - Elimina recursos

// Tabla resumen
| M√©todo  | Seguro | Idempotente | Cacheable |
|---------|--------|-------------|-----------|
| GET     | ‚úÖ     | ‚úÖ          | ‚úÖ        |
| HEAD    | ‚úÖ     | ‚úÖ          | ‚úÖ        |
| POST    | ‚ùå     | ‚ùå          | ‚ö†Ô∏è        |
| PUT     | ‚ùå     | ‚úÖ          | ‚ùå        |
| PATCH   | ‚ùå     | ‚úÖ*         | ‚ùå        |
| DELETE  | ‚ùå     | ‚úÖ          | ‚ùå        |
| OPTIONS | ‚úÖ     | ‚úÖ          | ‚ùå        |

* PATCH puede ser idempotente seg√∫n implementaci√≥n`,
          lenguaje: 'markdown'
        }
      ]
    },
    {
      id: 'mejores-practicas',
      titulo: 'Mejores Pr√°cticas',
      icono: '‚ú®',
      items: [
        {
          subtitulo: 'Uso correcto de m√©todos',
          texto: 'Gu√≠a de mejores pr√°cticas para dise√±ar APIs RESTful correctamente.',
          items: [
            'Usa GET solo para lectura, nunca para modificar datos',
            'POST para crear, retorna 201 con Location header',
            'PUT cuando tienes el objeto completo',
            'PATCH para actualizaciones parciales y eficientes',
            'DELETE debe ser idempotente (no fallar si ya est√° eliminado)',
            'Respeta la sem√°ntica HTTP para mejor interoperabilidad'
          ]
        },
        {
          subtitulo: 'C√≥digos de respuesta apropiados',
          texto: 'Usa los c√≥digos HTTP correctos seg√∫n el m√©todo y resultado.',
          codigo: `// GET
200 OK                    - Recurso encontrado
404 Not Found            - Recurso no existe
304 Not Modified         - Para cach√©

// POST  
201 Created              - Recurso creado exitosamente
400 Bad Request          - Datos inv√°lidos
409 Conflict             - Recurso ya existe

// PUT/PATCH
200 OK                   - Actualizado y retorna recurso
204 No Content           - Actualizado sin retornar
400 Bad Request          - Datos inv√°lidos
404 Not Found            - Recurso a actualizar no existe

// DELETE
204 No Content           - Eliminado sin respuesta
200 OK                   - Eliminado con confirmaci√≥n
404 Not Found            - No existe (¬øo 204?)
409 Conflict             - No se puede eliminar (dependencias)`,
          lenguaje: 'http'
        }
      ]
    }
  ]
};